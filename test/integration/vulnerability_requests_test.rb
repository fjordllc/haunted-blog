# frozen_string_literal: true

require 'test_helper'

class VulnerabilityRequestsTest < ActionDispatch::IntegrationTest
  include Warden::Test::Helpers

  def setup
    Warden.test_mode!
    @alice = users(:alice)
    @bob = users(:bob)
  end

  test '他人のブログの編集画面にはアクセスできない' do
    login_as(@alice)
    get edit_blog_path(blogs(:bob_blog))
    assert_response 404
  end

  test '他人のブログは編集できない' do
    login_as(@alice)
    put blog_path(blogs(:bob_blog)), params: { blog: { title: 'アリスです' } }
    assert_response 404
  end

  test '他人のブログは削除できない' do
    login_as(@alice)
    delete blog_path(blogs(:bob_blog))
    assert_response 404
  end

  test '未ログインのユーザーは秘密のブログにアクセスできない' do
    get blog_path(blogs(:alice_secret_blog))
    assert_response 404
  end

  test 'ログインしていても他人の秘密のブログにはアクセスできない' do
    login_as(@bob)
    get blog_path(blogs(:alice_secret_blog))
    assert_response 404
  end

  test '通常ユーザーはアイキャッチを設定できない' do
    blog = blogs(:bob_blog)
    assert_not @bob.premium
    assert_not blog.random_eyecatch

    login_as(@bob)
    put blog_path(blogs(:bob_blog)), params: { blog: { random_eyecatch: true } }
    assert_response 302
    assert_not blog.reload.random_eyecatch
  end

  test 'APIの返却値に個人情報(メールアドレス)が含まれない' do
    login_as(@alice)
    get api_blog_liking_users_path(blogs(:bob_blog)), as: :json
    assert_response 200
    users = JSON.parse(@response.body)['users']
    assert_equal 1, users.size
    user = users[0]
    assert_equal 'Alice', user['nickname']
    assert_nil user['email']
  end
end
